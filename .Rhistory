sep =""),las=1)
botrt <- latencies[responses<0]
botprop <- length(botrt)/nreps
hist(botrt, col = "gray",
xlab = "Decision time",xlim = c(0,max(latencies)),
main = paste("Bottom responses
(",as.numeric(botprop),
") m=", as.character(signif(mean(botrt),4)),
sep=""),las = 1)
#Random walk model
nreps <- 1e4
nsamples <- 2000
drift <- 0.0 #noninformative stimulus
sdrw <- 0.3
criterion <- 3
t2tsd <- c(0.0,0.025)
latencies <- rep(0,nreps)
responses <- rep(0,nreps)
evidence <- matrix(0,nreps,nsamples+1)
for (i in c(1:nreps)){
sp = rnorm(1,0,t2tsd[1])
dr = rnorm(1,0,t2tsd[2])
evidence[i,] <-
cumsum(c(sp,rnorm(nsamples,dr,sdrw))) #adds all points in a vector
p<- which(abs(evidence[i,])>criterion)[1] #returns position of values in a vector that meet a criterion
responses[i] <- sign(evidence[i,p]) #Sign returns the sign of a set of numbers
latencies[i] <- p
}
#Plot up to 5 random walk paths
tbpn <- min(nreps,5)
plot(1:max(latencies[1:tbpn])+10,type="n",las=1,
ylim=c(-criterion-.5,criterion+.5),
ylab = "Evidence", xlab = "decision time")
for (i in c(1:tbpn)){
lines(evidence[i,1:(latencies[i]-1)])
}
abline(h=c(criterion,-criterion), lty="dashed")
#Plot histogram of latencies
par(mfrow=c(2,1))
toprt <- latencies[responses>0]
topprop <- length(toprt)/nreps
hist(toprt,col="gray",
xlab="Decision time", xlim = c(0,max(latencies)),
main = paste("Top responses
( ", as.numeric(topprop),") m=",as.character(signif(mean(toprt),4)),
sep =""),las=1)
botrt <- latencies[responses<0]
botprop <- length(botrt)/nreps
hist(botrt, col = "gray",
xlab = "Decision time",xlim = c(0,max(latencies)),
main = paste("Bottom responses
(",as.numeric(botprop),
") m=", as.character(signif(mean(botrt),4)),
sep=""),las = 1)
#Random walk model
nreps <- 1e4
nsamples <- 2000
drift <- 0.0 #noninformative stimulus
sdrw <- 0.3
criterion <- 3
t2tsd <- c(0.8,0.0)
latencies <- rep(0,nreps)
responses <- rep(0,nreps)
evidence <- matrix(0,nreps,nsamples+1)
for (i in c(1:nreps)){
sp = rnorm(1,0,t2tsd[1])
dr = rnorm(1,0,t2tsd[2])
evidence[i,] <-
cumsum(c(sp,rnorm(nsamples,dr,sdrw))) #adds all points in a vector
p<- which(abs(evidence[i,])>criterion)[1] #returns position of values in a vector that meet a criterion
responses[i] <- sign(evidence[i,p]) #Sign returns the sign of a set of numbers
latencies[i] <- p
}
#Plot up to 5 random walk paths
tbpn <- min(nreps,5)
plot(1:max(latencies[1:tbpn])+10,type="n",las=1,
ylim=c(-criterion-.5,criterion+.5),
ylab = "Evidence", xlab = "decision time")
for (i in c(1:tbpn)){
lines(evidence[i,1:(latencies[i]-1)])
}
abline(h=c(criterion,-criterion), lty="dashed")
#Plot histogram of latencies
par(mfrow=c(2,1))
toprt <- latencies[responses>0]
topprop <- length(toprt)/nreps
hist(toprt,col="gray",
xlab="Decision time", xlim = c(0,max(latencies)),
main = paste("Top responses
( ", as.numeric(topprop),") m=",as.character(signif(mean(toprt),4)),
sep =""),las=1)
botrt <- latencies[responses<0]
botprop <- length(botrt)/nreps
hist(botrt, col = "gray",
xlab = "Decision time",xlim = c(0,max(latencies)),
main = paste("Bottom responses
(",as.numeric(botprop),
") m=", as.character(signif(mean(botrt),4)),
sep=""),las = 1)
x = c(1,3,4,4)
y <- c(2,5,5,8)
sum(x*y)
sqrt(0.32)
0.32^2
x <- rnorm(22,16.04,19.35)
x=''
change <- rnorm(22,16.04,19.35)
noChange <- rnorm(22,1.68,5.23)
noSelf <- rnorm(19,0.63,2.75)
set <- as.dataframe(c(change,noChange,noSelf))
set <- as.data.frame(c(change,noChange,noSelf))
set
set <- as.data.frame(columns = c(change,noChange,noSelf))
set <- c(change,noChange,noSelf)
set
set <- cbind(change,noChange,noSelf)
set <- bind(change,noChange,noSelf)
set <- rbind(change,noChange,noSelf)
set <- data.frame(c(change,noChange,noSelf))
sert
set
change
noChange
noSelf
set <- data.frame(change,noChange,noSelf)
noSelf <- rnorm(22,0.63,2.75)
set <- data.frame(change,noChange,noSelf)
set
sapply(set,mean)
sapply(set,sd)
anova.psych(set)
fit <- aov(y~change*noChange+noSelf, data = set)
set
fit <- aov(y ~ A, data = set)
?aov
melt(set)
set
set <- melt(set)
set
fit <- aov(y ~ variable,data = set)
sapply(c(change,noChange,noSelf), length)
apply(c(change,noChange,noSelf), length)
by(variable, length)
length(set)
set
fit <- aov(value ~ variable,data = set)
fit
summary(fit)
plot(fit)
require(twitteR)
require(wordcloud)
require(igraph)
consumer_key <- 'CSANVgafnbWmG83cBkCPw5Kt5'
consumer_secret<-'GvIqrPuNdNdLYdLJnE7WUYQQLstNFruQM5FnEArr1tX46Ac6lP'
access_token <- '3165807077-QlCXOA4Nm6dE2rFZaVECkHI190E5aAvIJX4DMAK'
access_secret <- 'nxPZFvX6DgU0f5GGic1zU3bOWWPntEj6WV47FdI9vOvbs'
setup_twitter_oauth(consumer_key,consumer_secret)
tweets = searchTwitter("#fitshaming", n = 500)
summary(fit)
rnorm(1,0,t2tsd[1]
)
head(latencies)
head(evidence)
head(evidence)
summary(evidence)
view(evidence)
View(evidence)
head(latencies)
rho <- 0.8
intecept <- .0
nDatapts <- 20
data <- matrix(0,nDataPts,s)
data[,2] <- rnorm(nDataPts)
data[,1] <- rnorm(nDataPts) * sqrt(1.0-rho^2) + data[
,2]*rho + intercept
rho <- 0.8
intecept <- .0
nDataPts <- 20
data <- matrix(0,nDataPts,s)
data[,2] <- rnorm(nDataPts)
data[,1] <- rnorm(nDataPts) * sqrt(1.0-rho^2) + data[
,2]*rho + intercept
rho <- 0.8
intercept <- .0
nDataPts <- 20
data <- matrix(0,nDataPts,s)
data[,2] <- rnorm(nDataPts)
data[,1] <- rnorm(nDataPts) * sqrt(1.0-rho^2) + data[
,2]*rho + intercept
data
data
data <- matrix(0,nDataPts,s)
data[,2] <- rnorm(nDataPts)
data[,1] <- rnorm(nDataPts) * sqrt(1.0-rho^2) + data[
,2]*rho + intercept
data <- matrix(0,nDataPts,2)
data[,2] <- rnorm(nDataPts)
data[,1] <- rnorm(nDataPts) * sqrt(1.0-rho^2) + data[
,2]*rho + intercept
data
lm(data[,1] ~ data[,2])
startParms <- c(-1.0,.2)
names(startParams) <- c("b1","b0")
#Assign starting values
startParms <- c(-1.0,.2)
names(startParms) <- c("b1","b0")
xout <- optim(startParms, rmsd,data1=data)
xout <- optim(startParms, rmsd,data1=data)
?optim
xout <- optim(startParms, "rmsd",data1=data)
install.packages(stats)
xout <- optim(startParms, method = "rmsd",data1=data)
getregpred <- function(parms, data){
getregpred <- parms["b0"] + parms["b1"] * data[,2]
#wait with drawing a graph until key is pressed
par(ask=TRUE)
plot(data[,2], type = "n", las = 1, ylim = c(-2,2)
xlim = c(-2,2),xlab="X",ylab="Y")
par(ask = FALSE)
points (data[,2],data[,1], pch=21, bg="gray")
lines(data[,2], getregpred, lty"solid")
return(getregpred)
}
getregpred <- function(parms, data){
getregpred <- parms["b0"] + parms["b1"] * data[,2]
#wait with drawing a graph until key is pressed
par(ask=TRUE)
plot(data[,2], type = "n", las = 1, ylim = c(-2,2)
xlim = c(-2,2),xlab="X",ylab="Y")
par(ask = FALSE)
points (data[,2],data[,1], pch=21, bg="gray")
lines(data[,2], getregpred, lty = "solid")
return(getregpred)
}
getregpred <- function(parms, data){
getregpred <- parms["b0"] + parms["b1"] * data[,2]
#wait with drawing a graph until key is pressed
par(ask=TRUE)
plot(data[,2], type = "n", las = 1, ylim = c(-2,2)
xlim = c(-2,2),xlab="X",ylab="Y")
par(ask = FALSE)
points (data[,2],data[,1], pch=21, bg="gray")
lines(data[,2], getregpred, lty = "solid")
return(getregpred)
}
getregpred <- function(parms, data){
getregpred <- parms["b0"] + parms["b1"] * data[,2]
#wait with drawing a graph until key is pressed
par(ask=TRUE)
plot(data[,2], type = "n", las = 1, ylim = c(-2,2)
xlim = c(-2,2),xlab="X",ylab="Y"))
par(ask = FALSE)
points (data[,2],data[,1], pch=21, bg="gray")
lines(data[,2], getregpred, lty = "solid")
return(getregpred)
}
getregpred <- function(parms, data){
getregpred <- parms["b0"] + parms["b1"] * data[,2]
#wait with drawing a graph until key is pressed
par(ask=TRUE)
plot(data[,2], type = "n", las = 1, ylim = c(-2,2),
xlim = c(-2,2),xlab="X",ylab="Y")
par(ask = FALSE)
points (data[,2],data[,1], pch=21, bg="gray")
lines(data[,2], getregpred, lty = "solid")
return(getregpred)
}
rmsd <- function(params,data1){
preds <- getregpred(parms,data1)
rmsd <- sqrt(sum((preds-data1[,1])^2)/length(preds))
}
xout <- optim(startParms, rmsd,data1=data)
getregpred <- function(parms, data){
getregpred <- parms["b0"] + parms["b1"] * data[,2]
#wait with drawing a graph until key is pressed
par(ask=TRUE)
plot(data[,2], type = "n", las = 1, ylim = c(-2,2),
xlim = c(-2,2),xlab="X",ylab="Y")
par(ask = FALSE)
points (data[,2],data[,1], pch=21, bg="gray")
lines(data[,2], getregpred, lty = "solid")
return(getregpred)
}
#obtain current predictions and compute discrepancy
rmsd <- function(parms,data1){
preds <- getregpred(parms,data1)
rmsd <- sqrt(sum((preds-data1[,1])^2)/length(preds))
}
#Create a linear model to demonstrate parameter estimation techniques using RMLS
rho <- 0.8
intercept <- .0
nDataPts <- 20
#Generate synthetic data
data <- matrix(0,nDataPts,2)
data[,2] <- rnorm(nDataPts)
data[,1] <- rnorm(nDataPts) * sqrt(1.0-rho^2) + data[
,2]*rho + intercept
#Do conventional regression analysis
lm(data[,1] ~ data[,2])
#Assign starting values
startParms <- c(-1.0,.2)
names(startParms) <- c("b1","b0")
#obtain parameter estimates
xout <- optim(startParms, rmsd,data1=data)
sqrt(0.06)
install.packages('epir')
install.packages('epiR')
curve(dbeta(1e4,5,10))
curve(dbeta(x,a,b))
?dbeta
curve(dbeta(c(0.025,0.975),1,1))
dbeta(c(0.025,0.975),1,1)
curve(dbeta(c(0.025,0.975),1,1))
x <- seq(0,1,length = 100)
curve(dbeta(x,1,1))
curve(dbeta(x,10,1))
x <- seq(0,1,length = 100)
a<- 10
b <- 2
curve(dbeta(x,a,b))
abline( v = a/(a+b))
x <- seq(0,1,length = 100)
a<- 10
b <- 20
curve(dbeta(x,a,b))
abline( v = a/(a+b))
?dbeta
x <- seq(0,1,length = 100)
a<- range(1:10)
b <- range(1:10)
for (i in range(1:10){
curve(dbeta(x,a[i],b[i]))
abline( v = a[i]/(a[i]+b[i]))
}
x <- seq(0,1,length = 100)
a<- range(1:10)
b <- range(1:10)
for (i in range(1:10){
curve(dbeta(x,a[i],b[i]))
abline( v = a[i]/(a[i]+b[i]))
}
a
b
a<- (1:10)
b <- (1:10)
a
x <- seq(0,1,length = 100)
a<- (1:10)
b <- (1:10)
for (i in range(1:10){
curve(dbeta(x,a[i],b[i]))
abline( v = a[i]/(a[i]+b[i]))
}
x <- seq(0,1,length = 100)
a<- (1:10)
b <- (1:10)
for (i in (1:10)){
curve(dbeta(x,a[i],b[i]))
abline( v = a[i]/(a[i]+b[i]))
}
?dbeta
x <- seq(0,1,length = 100)
a<- (10:20)
b <- (1:10)
for (i in (1:10)){
curve(dbeta(x,a[i],b[i]))
abline( v = a[i]/(a[i]+b[i]))
}
x <- seq(0,1,length = 100)
a<- (20:30)
b <- (1:10)
for (i in (1:10)){
curve(dbeta(x,a[i],b[i]))
abline( v = a[i]/(a[i]+b[i]))
}
x <- seq(0,1,length = 100)
a<- (20:30)
b <- (1:10)
for (i in (1:10)){
curve(dbeta(x,a[i],b[i]))
abline( v = a[i]/(a[i]+b[i]))
}
c <- 10, d <- 5
curve(dbeta(x,c,d))
abline( v = c/c+d)
c <- 10
d <- 5
curve(dbeta(x,c,d))
abline( v = c/c+d)
c <- 10
d <- 5
curve(dbeta(x,c,d))
abline( v = c/c+d)
c <- 100
d <- 50
curve(dbeta(x,c,d))
abline( v = c/c+d)
library(epiR)
epi.betabuster(mode=.6,conf=.90, greaterthan=T,x=.25)
curve(dbeta(x,2.33,1.88))
epi.betabuster(mode=.6,conf=.90, greaterthan=T,x=.25)
abline(v = 2.33/2.33+1.88)
curve(dbeta(x,2.33,1.88))
abline(v = 2.33/2.33+1.88)
abline(v = 2.33/2.33+1.88)
epi.betabuster(mode=.6,conf=.99, greaterthan=T,x=.25)
epi.betabuster(mode=.6,conf=.9999, greaterthan=T,x=.25)
epi.betabuster(mode=.6,conf=.99999999, greaterthan=T,x=.25)
epi.betabuster(mode=.6,conf=.999999999999999, greaterthan=T,x=.25)
epi.betabuster(mode=.6,conf=.999999999999999999999999, greaterthan=T,x=.25)
?epi.betabuster
epi.betabuster(mode=.9,conf=.90, greaterthan=T,x=.25)
n <- 20
thetas <- rbinom(nsims, 1.729, 1.081)
pred_ys <- rbindom(nsims,n,thetas)
round(table(pred_ys)/nsims,3)
pred_ys
nsims <- 1e6
n <- 20
thetas <- rbinom(nsims, 1.729, 1.081)
pred_ys <- rbindom(nsims,n,thetas)
round(table(pred_ys)/nsims,3)
pred_ys
head(thetas)
nsims <- 1e6
n <- 20
thetas <- rbeta(nsims, 1.729, 1.081)
pred_ys <- rbinom(nsims,n,thetas)
round(table(pred_ys)/nsims,3)
pred_ys
hist(pred_ys)
curve(pred_ys)
n <- 20
thetas <- rbeta(nsims, 1.729, 1.081)
pred_ys <- rbinom(nsims,n,thetas)
round(table(pred_ys)/nsims,3)
pred_ys
nsims <- 1e6
N <- 20
thetas <- rbeta(nsims,2.33,1.88)
pred_ys <- rbinom(nsims,N,thetas)
round(table(pred_ys)/nsims,3)
barplot(table(pred_ys)/nsims
)
zz <- rmultinom(32,74,0.1)
zz
?rmultinom
zz <- rmultinom(c(0:50), 100,0.1)
zz
zz[1,]
str(zz)
rmultinom(10, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(10, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(10, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(10, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(20, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(20, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(20, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(20, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(20, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(20, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(10, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(10, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(2, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(2, size = 100, prob = c(0.1,0.2,0.8))
rmultinom(2, size = 100, prob = c(0.1,0.2,0.8))
rmultinom(2, size = 100, prob = c(0.1,0.2,0.8))
rmultinom(2, size = 100, prob = c(0.1,0.2,0.8))
rmultinom(1, size = 100, prob = c(0.1,0.2,0.8))
rmultinom(1, size = 100, prob = c(0.5,0.5,0.8))
rmultinom(1, size = 100, prob = c(0.5,0.5,0.8))
rmultinom(1, size = 100, prob = c(0.5,0.5,0.8))
rmultinom(1, size = 100, prob = c(0.5,0.5,0.8))
rmultinom(1, size = 100, prob = c(0.5,0.5,0.8))
?papaja
install.packages("RQDA")
install.packages("RQDA")
setwd('/Users/oliverclark/GitHub/blogdown_source')
library('blogdown')
blogdown::build_site()
setwd("/Users/oliverclark/GitHub/oliverclark.github.io")
system('git rebase origin/master')
system('git add --all')
system('git commit -m "OS_Talk1"')
system('git push -f origin master')
blogdown::build_site()
setwd('/Users/oliverclark/GitHub/blogdown_source')
library('blogdown')
blogdown::build_site()
setwd("/Users/oliverclark/GitHub/oliverclark.github.io")
system('git rebase origin/master')
system('git add --all')
system('git commit -m "OS_Talk1"')
system('git push -f origin master')
setwd("/Users/oliverclark/GitHub/oliverclark.github.io")
system('git rebase origin/master')
system('git add --all')
system('git commit -m "OS_Talk1"')
system('git push -f origin master')
setwd('/Users/oliverclark/GitHub/blogdown_source')
library('blogdown')
blogdown::build_site()
setwd("/Users/oliverclark/GitHub/oliverclark.github.io")
system('git rebase origin/master')
system('git add --all')
system('git commit -m "Logo"')
system('git push -f origin master')
setwd("/Users/oliverclark/GitHub/oliverclark.github.io")
system('git rebase origin/master')
system('git add --all')
system('git commit -m "Logo"')
system('git push -f origin master')
